#include <concepts>

#include "des.h"

#define DEBUG

#ifdef DEBUG
#include <iostream>
#include <bitset>

auto print = [](auto const remark, auto const& v) {
    using namespace std;
    std::cout << remark << ": ";
    for (auto n : v)
        std::cout << int(n) << ' ';
    std::cout << '\n';
};

template<int T>
void pprint(uint64_t num,
            uint8_t chunk_len = T,
            const std::string& remark = "") {

    if (!remark.empty()) {
        std::cout << remark << ": ";
    }
    std::bitset<T> x(num);
    std::string res = x.to_string();
    for (size_t i = 0; i < T; i++) {
        if (i % chunk_len == 0 && i != 0) {
            std::cout << ' ';
        }
        std::cout << res[i];
    }
    std::cout << '\n';
};


#endif

std::vector<uint8_t> PC_1 =
    {0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 0x09,
     0x01, 0x3a, 0x32, 0x2a, 0x22, 0x1a, 0x12,
     0x0a, 0x02, 0x3b, 0x33, 0x2b, 0x23, 0x1b,
     0x13, 0x0b, 0x03, 0x3c, 0x34, 0x2c, 0x24,
     0x3f, 0x37, 0x2f, 0x27, 0x1f, 0x17, 0x0f,
     0x07, 0x3e, 0x36, 0x2e, 0x26, 0x1e, 0x16,
     0x0e, 0x06, 0x3d, 0x35, 0x2d, 0x25, 0x1d,
     0x15, 0x0d, 0x05, 0x1c, 0x14, 0x0c, 0x04};

std::vector<uint8_t> PC_2 =
    {0x0e, 0x11, 0x0b, 0x18, 0x01, 0x05, 0x03, 0x1c,
     0x0f, 0x06, 0x15, 0x0a, 0x17, 0x13, 0x0c, 0x04,
     0x1a, 0x08, 0x10, 0x07, 0x1b, 0x14, 0x0d, 0x02,
     0x29, 0x34, 0x1f, 0x25, 0x2f, 0x37, 0x1e, 0x28,
     0x33, 0x2d, 0x21, 0x30, 0x2c, 0x31, 0x27, 0x38,
     0x22, 0x35, 0x2e, 0x2a, 0x32, 0x24, 0x1d, 0x20};

std::vector<uint8_t> SHIFT =
    {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

std::vector<uint8_t> IP =
    {0x3a, 0x32, 0x2a, 0x22, 0x1a, 0x12, 0x0a, 0x02,
     0x3c, 0x34, 0x2c, 0x24, 0x1c, 0x14, 0x0c, 0x04,
     0x3e, 0x36, 0x2e, 0x26, 0x1e, 0x16, 0x0e, 0x06,
     0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x08,
     0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 0x09, 0x01,
     0x3b, 0x33, 0x2b, 0x23, 0x1b, 0x13, 0x0b, 0x03,
     0x3d, 0x35, 0x2d, 0x25, 0x1d, 0x15, 0x0d, 0x05,
     0x3f, 0x37, 0x2f, 0x27, 0x1f, 0x17, 0x0f, 0x07};

std::vector<uint8_t> IP_1 =
    {0x28, 0x08, 0x30, 0x10, 0x38, 0x18, 0x40, 0x20,
     0x27, 0x07, 0x2f, 0x0f, 0x37, 0x17, 0x3f, 0x1f,
     0x26, 0x06, 0x2e, 0x0e, 0x36, 0x16, 0x3e, 0x1e,
     0x25, 0x05, 0x2d, 0x0d, 0x35, 0x15, 0x3d, 0x1d,
     0x24, 0x04, 0x2c, 0x0c, 0x34, 0x14, 0x3c, 0x1c,
     0x23, 0x03, 0x2b, 0x0b, 0x33, 0x13, 0x3b, 0x1b,
     0x22, 0x02, 0x2a, 0x0a, 0x32, 0x12, 0x3a, 0x1a,
     0x21, 0x01, 0x29, 0x09, 0x31, 0x11, 0x39, 0x19};

std::vector<uint8_t> E =
    {0x20, 0x01, 0x02, 0x03, 0x04, 0x05,
     0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
     0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
     0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
     0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
     0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
     0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x01};

std::vector<std::vector<uint8_t>> S1 =
    {{0x0e, 0x04, 0x0d, 0x01, 0x02, 0x0f, 0x0b, 0x08, 0x03, 0x0a, 0x06, 0x0c, 0x05, 0x09, 0x00, 0x07},
     {0x00, 0x0f, 0x07, 0x04, 0x0e, 0x02, 0x0d, 0x01, 0x0a, 0x06, 0x0c, 0x0b, 0x09, 0x05, 0x03, 0x08},
     {0x04, 0x01, 0x0e, 0x08, 0x0d, 0x06, 0x02, 0x0b, 0x0f, 0x0c, 0x09, 0x07, 0x03, 0x0a, 0x05, 0x00},
     {0x0f, 0x0c, 0x08, 0x02, 0x04, 0x09, 0x01, 0x07, 0x05, 0x0b, 0x03, 0x0e, 0x0a, 0x00, 0x06, 0x0d}};

std::vector<std::vector<uint8_t>> S2 =
    {{0x0f, 0x01, 0x08, 0x0e, 0x06, 0x0b, 0x03, 0x04, 0x09, 0x07, 0x02, 0x0d, 0x0c, 0x00, 0x05, 0x0a},
     {0x03, 0x0d, 0x04, 0x07, 0x0f, 0x02, 0x08, 0x0e, 0x0c, 0x00, 0x01, 0x0a, 0x06, 0x09, 0x0b, 0x05},
     {0x00, 0x0e, 0x07, 0x0b, 0x0a, 0x04, 0x0d, 0x01, 0x05, 0x08, 0x0c, 0x06, 0x09, 0x03, 0x02, 0x0f},
     {0x0d, 0x08, 0x0a, 0x01, 0x03, 0x0f, 0x04, 0x02, 0x0b, 0x06, 0x07, 0x0c, 0x00, 0x05, 0x0e, 0x09}};

std::vector<std::vector<uint8_t>> S3 =
    {{0x0a, 0x00, 0x09, 0x0e, 0x06, 0x03, 0x0f, 0x05, 0x01, 0x0d, 0x0c, 0x07, 0x0b, 0x04, 0x02, 0x08},
     {0x0d, 0x07, 0x00, 0x09, 0x03, 0x04, 0x06, 0x0a, 0x02, 0x08, 0x05, 0x0e, 0x0c, 0x0b, 0x0f, 0x01},
     {0x0d, 0x06, 0x04, 0x09, 0x08, 0x0f, 0x03, 0x00, 0x0b, 0x01, 0x02, 0x0c, 0x05, 0x0a, 0x0e, 0x07},
     {0x01, 0x0a, 0x0d, 0x00, 0x06, 0x09, 0x08, 0x07, 0x04, 0x0f, 0x0e, 0x03, 0x0b, 0x05, 0x02, 0x0c}};

std::vector<std::vector<uint8_t>> S4 =
    {{0x07, 0x0d, 0x0e, 0x03, 0x00, 0x06, 0x09, 0x0a, 0x01, 0x02, 0x08, 0x05, 0x0b, 0x0c, 0x04, 0x0f},
     {0x0d, 0x08, 0x0b, 0x05, 0x06, 0x0f, 0x00, 0x03, 0x04, 0x07, 0x02, 0x0c, 0x01, 0x0a, 0x0e, 0x09},
     {0x0a, 0x06, 0x09, 0x00, 0x0c, 0x0b, 0x07, 0x0d, 0x0f, 0x01, 0x03, 0x0e, 0x05, 0x02, 0x08, 0x04},
     {0x03, 0x0f, 0x00, 0x06, 0x0a, 0x01, 0x0d, 0x08, 0x09, 0x04, 0x05, 0x0b, 0x0c, 0x07, 0x02, 0x0e}};

std::vector<std::vector<uint8_t>> S5 =
    {{0x02, 0x0c, 0x04, 0x01, 0x07, 0x0a, 0x0b, 0x06, 0x08, 0x05, 0x03, 0x0f, 0x0d, 0x00, 0x0e, 0x09},
     {0x0e, 0x0b, 0x02, 0x0c, 0x04, 0x07, 0x0d, 0x01, 0x05, 0x00, 0x0f, 0x0a, 0x03, 0x09, 0x08, 0x06},
     {0x04, 0x02, 0x01, 0x0b, 0x0a, 0x0d, 0x07, 0x08, 0x0f, 0x09, 0x0c, 0x05, 0x06, 0x03, 0x00, 0x0e},
     {0x0b, 0x08, 0x0c, 0x07, 0x01, 0x0e, 0x02, 0x0d, 0x06, 0x0f, 0x00, 0x09, 0x0a, 0x04, 0x05, 0x03}};

std::vector<std::vector<uint8_t>> S6 =
    {{0x0c, 0x01, 0x0a, 0x0f, 0x09, 0x02, 0x06, 0x08, 0x00, 0x0d, 0x03, 0x04, 0x0e, 0x07, 0x05, 0x0b},
     {0x0a, 0x0f, 0x04, 0x02, 0x07, 0x0c, 0x09, 0x05, 0x06, 0x01, 0x0d, 0x0e, 0x00, 0x0b, 0x03, 0x08},
     {0x09, 0x0e, 0x0f, 0x05, 0x02, 0x08, 0x0c, 0x03, 0x07, 0x00, 0x04, 0x0a, 0x01, 0x0d, 0x0b, 0x06},
     {0x04, 0x03, 0x02, 0x0c, 0x09, 0x05, 0x0f, 0x0a, 0x0b, 0x0e, 0x01, 0x07, 0x06, 0x00, 0x08, 0x0d}};

std::vector<std::vector<uint8_t>> S7 =
    {{0x04, 0x0b, 0x02, 0x0e, 0x0f, 0x00, 0x08, 0x0d, 0x03, 0x0c, 0x09, 0x07, 0x05, 0x0a, 0x06, 0x01},
     {0x0d, 0x00, 0x0b, 0x07, 0x04, 0x09, 0x01, 0x0a, 0x0e, 0x03, 0x05, 0x0c, 0x02, 0x0f, 0x08, 0x06},
     {0x01, 0x04, 0x0b, 0x0d, 0x0c, 0x03, 0x07, 0x0e, 0x0a, 0x0f, 0x06, 0x08, 0x00, 0x05, 0x09, 0x02},
     {0x06, 0x0b, 0x0d, 0x08, 0x01, 0x04, 0x0a, 0x07, 0x09, 0x05, 0x00, 0x0f, 0x0e, 0x02, 0x03, 0x0c}};

std::vector<std::vector<uint8_t>> S8 =
    {{0x0d, 0x02, 0x08, 0x04, 0x06, 0x0f, 0x0b, 0x01, 0x0a, 0x09, 0x03, 0x0e, 0x05, 0x00, 0x0c, 0x07},
     {0x01, 0x0f, 0x0d, 0x08, 0x0a, 0x03, 0x07, 0x04, 0x0c, 0x05, 0x06, 0x0b, 0x00, 0x0e, 0x09, 0x02},
     {0x07, 0x0b, 0x04, 0x01, 0x09, 0x0c, 0x0e, 0x02, 0x00, 0x06, 0x0a, 0x0d, 0x0f, 0x03, 0x05, 0x08},
     {0x02, 0x01, 0x0e, 0x07, 0x04, 0x0a, 0x08, 0x0d, 0x0f, 0x0c, 0x09, 0x00, 0x03, 0x05, 0x06, 0x0b}};

std::vector<std::vector<std::vector<uint8_t>>> SBOX = {
    S1, S2, S3, S4, S5, S6, S7, S8
};

std::vector<uint8_t> P =
    {0x10, 0x07, 0x14, 0x15, 0x1d, 0x0c, 0x1c, 0x11,
     0x01, 0x0f, 0x17, 0x1a, 0x05, 0x12, 0x1f, 0x0a,
     0x02, 0x08, 0x18, 0x0e, 0x20, 0x1b, 0x03, 0x09,
     0x13, 0x0d, 0x1e, 0x06, 0x16, 0x0b, 0x04, 0x19};

template<typename T>
requires (std::is_integral<T>::value)
T des::permute(const T & block, uint8_t input_bit_count,
               const std::vector<uint8_t> & box) {
    T res = 0;
    for (auto& idx : box) {
        res <<= 1;
        uint8_t pos = input_bit_count - idx;
        uint8_t bit = (block & (1ll << pos)) >> pos;
        res |= bit;
    }
    return res;
}


inline uint32_t rotate_left(uint32_t n, uint32_t bits) {
    return (n << bits) | (n >> (28 - bits));
}

des::des(const uint64_t key) {
    this->master_key = key;
    auto cur = permute<uint64_t>(master_key, 64, PC_1);

    uint64_t left = cur >> 28;
    uint64_t right = cur & ((1 << 28) - 1);

    for (uint8_t i = 0; i < 16; i++) {
        left = rotate_left(left, SHIFT[i]);
        right = rotate_left(right, SHIFT[i]);
        uint64_t concatenated = (left << 28) | right;

        auto round_key = permute<uint64_t>(concatenated, 56, PC_2);
        round_keys[i] = round_key;
    }
}